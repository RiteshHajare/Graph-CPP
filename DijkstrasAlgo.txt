#include <queue>
#include <iostream>
#include <vector>
#include <climits>
using namespace std;

class Edge
{
public:
    int src;
    int dest;
    int wt;

    Edge(int s, int d,int w)
    {
        src = s;
        dest = d;
        wt=w;
    }
};

void createGraph(vector<vector<Edge>>& graph)
{
    // for(int i=0;i<graph.size();i++){
    //     graph[i] =vector<Edge>();
    // }
    graph[0].push_back( Edge(0,1,2));
    graph[0].push_back( Edge(0,2,4));
    graph[1].push_back( Edge(1,3,7));
    graph[1].push_back( Edge(1,2,1));
    graph[2].push_back( Edge(2,4,3));
    graph[3].push_back( Edge(3,5,1));
    graph[4].push_back( Edge(4,3,2));
    graph[4].push_back( Edge(4,5,5));
}

class Pair{
    public:
    int node;
    int dist;
    
    Pair(int n,int d){
        node=n;
        dist=d;
    }
    
    bool operator<(const Pair& p2) const{
        return dist>p2.dist;
    }
};

void dijkstras(vector<vector<Edge>>graph,int src,int V){
    std::priority_queue<Pair> pq;
    vector<int> dist(V,INT_MAX);
    dist[src]=0;
    vector<bool> vis(V,false);
    pq.push(Pair(0,0));
    
    while(!pq.empty()){
        Pair p = pq.top();
        pq.pop();
        if(!vis[p.node]){
            vis[p.node]=true;
            for(int i=0;i<graph[p.node].size();i++){
                Edge e = graph[p.node][i];
                
                int u = e.src;
                int v = e.dest;
                if(dist[u]+e.wt<dist[v]){
                    dist[v] = dist[u]+e.wt;
                    pq.push(Pair(v,dist[v]));
                }
            }
        }
    }
    
    for(int i=0;i<V;i++){
        cout<<dist[i]<<" ";
    }
}


int main()
{
    int V = 6;
    vector<vector<Edge>> graph(V,vector<Edge>());
    createGraph(graph);
    vector<bool> vis(V,false);
    
    dijkstras(graph,0,V);
    return 0;
   
}