//prims algorithm

#include <queue>
#include <iostream>
#include <vector>
#include <climits>
using namespace std;

class Edge
{
public:
    int src;
    int dest;
    int wt;

    Edge(int s, int d,int w)
    {
        src = s;
        dest = d;
        wt=w;
    }
};

void createGraph(vector<vector<Edge>>& graph)
{
    // for(int i=0;i<graph.size();i++){
    //     graph[i] =vector<Edge>();
    // }
    graph[0].push_back( Edge(0,1,10));
    graph[0].push_back( Edge(0,2,15));
    graph[0].push_back( Edge(0,3,30));
    graph[1].push_back( Edge(1,0,10));
    graph[1].push_back( Edge(1,3,40));
    graph[2].push_back( Edge(2,0,15));
    graph[2].push_back( Edge(2,3,50));
    graph[3].push_back( Edge(3,1,40));
    graph[3].push_back( Edge(3,2,50));
}

class Pair{
    public:
    int node;
    int cost;
    
    Pair(int n,int c){
        node=n;
        cost=c;
    }
    
    bool operator<(const Pair& p2) const{
        return cost>p2.cost;
    }
};

void prims(vector<vector<Edge>> graph,int V){
    std::priority_queue<Pair> pq;
    vector<bool> vis(V,false);
    int cost=0;
    pq.push(Pair(0,0));
    
    while(!pq.empty()){
        Pair p = pq.top();
        pq.pop();
        if(!vis[p.node]){
            vis[p.node] = true;
            cost+=p.cost;
            for(int i=0;i<graph[p.node].size();i++){
                Edge e = graph[p.node][i];
                if(!vis[e.dest]){
                    pq.push(Pair(e.dest,e.wt));
                }
            }
        }
    }
    
    cout<<cost;
}
//ElogE time complexity
int main()
{
    int V = 4;
    vector<vector<Edge>> graph(V,vector<Edge>());
    createGraph(graph);
    
    prims(graph,V);
    return 0;
   
}