//DFS 
#include <queue>
#include <iostream>
#include <vector>
using namespace std;

class Edge
{
public:
    int src;
    int dest;

    Edge(int s, int d)
    {
        src = s;
        dest = d;
    }
};

void createGraph(vector<vector<Edge>>& graph)
{
    // for(int i=0;i<graph.size();i++){
    //     graph[i] =vector<Edge>();
    // }
    graph[0].push_back( Edge(0, 1));
    graph[0].push_back( Edge(0, 2));
    graph[1].push_back( Edge(1, 0));
    graph[1].push_back( Edge(1, 3));
    graph[2].push_back( Edge(2, 0));
    graph[2].push_back( Edge(2, 4));
    graph[3].push_back( Edge(3, 1));
    graph[3].push_back( Edge(3, 4));
    graph[3].push_back( Edge(3, 5));
    graph[4].push_back( Edge(4,2));
    graph[4].push_back( Edge(4,3));
    graph[4].push_back( Edge(4,5));
    graph[5].push_back( Edge(5,3));
    graph[5].push_back( Edge(5,4));
    graph[5].push_back( Edge(5,6));
    graph[6].push_back( Edge(6,5));
}


void dfs(vector<vector<Edge>> graph,int curr,vector<bool>& vis){
    cout<<curr<<" ";
    vis[curr]=true;
    for(int i=0;i<graph[curr].size();i++){
        Edge e = graph[curr][i];
        if(!vis[e.dest]){
            dfs(graph,e.dest,vis);
        }
    }
}

int main()
{
    int V = 7;
    vector<vector<Edge>> graph(V,vector<Edge>());
    createGraph(graph);
    vector<bool> vis(V,false);

    dfs(graph,0,vis);

	//for unconnected graph remove above line and add below
	//for(int i=0;i<V;i++){
      //  if(!vis[i]){
      //      dfs(graph,i,vis);
      //  	}
    //	}
    return 0;
   
}


